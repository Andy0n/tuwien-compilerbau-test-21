begin asmb
  => 0x555555554854 <asmb+4>:	mov    $0x0,%rax
  => 0x55555555485b <asmb+11>:	test   %rcx,%rcx
  => 0x55555555485e <asmb+14>:	je     0x555555554871 <.END>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554871 <.END>:	movq   $0x0,(%rdx,%rax,8)
  => 0x555555554879 <.END+8>:	adcq   $0x0,(%rdx,%rax,8)
  => 0x55555555487e <.EPILOG>:	leaveq 
  => 0x55555555487f <.EPILOG+1>:	retq   
end asmb
begin asmb
  => 0x555555554854 <asmb+4>:	mov    $0x0,%rax
  => 0x55555555485b <asmb+11>:	test   %rcx,%rcx
  => 0x55555555485e <asmb+14>:	je     0x555555554871 <.END>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554871 <.END>:	movq   $0x0,(%rdx,%rax,8)
  => 0x555555554879 <.END+8>:	adcq   $0x0,(%rdx,%rax,8)
  => 0x55555555487e <.EPILOG>:	leaveq 
  => 0x55555555487f <.EPILOG+1>:	retq   
end asmb
begin asmb
  => 0x555555554854 <asmb+4>:	mov    $0x0,%rax
  => 0x55555555485b <asmb+11>:	test   %rcx,%rcx
  => 0x55555555485e <asmb+14>:	je     0x555555554871 <.END>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554871 <.END>:	movq   $0x0,(%rdx,%rax,8)
  => 0x555555554879 <.END+8>:	adcq   $0x0,(%rdx,%rax,8)
  => 0x55555555487e <.EPILOG>:	leaveq 
  => 0x55555555487f <.EPILOG+1>:	retq   
end asmb
begin asmb
  => 0x555555554854 <asmb+4>:	mov    $0x0,%rax
  => 0x55555555485b <asmb+11>:	test   %rcx,%rcx
  => 0x55555555485e <asmb+14>:	je     0x555555554871 <.END>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554871 <.END>:	movq   $0x0,(%rdx,%rax,8)
  => 0x555555554879 <.END+8>:	adcq   $0x0,(%rdx,%rax,8)
  => 0x55555555487e <.EPILOG>:	leaveq 
  => 0x55555555487f <.EPILOG+1>:	retq   
end asmb
begin asmb
  => 0x555555554854 <asmb+4>:	mov    $0x0,%rax
  => 0x55555555485b <asmb+11>:	test   %rcx,%rcx
  => 0x55555555485e <asmb+14>:	je     0x555555554871 <.END>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554871 <.END>:	movq   $0x0,(%rdx,%rax,8)
  => 0x555555554879 <.END+8>:	adcq   $0x0,(%rdx,%rax,8)
  => 0x55555555487e <.EPILOG>:	leaveq 
  => 0x55555555487f <.EPILOG+1>:	retq   
end asmb
begin asmb
  => 0x555555554854 <asmb+4>:	mov    $0x0,%rax
  => 0x55555555485b <asmb+11>:	test   %rcx,%rcx
  => 0x55555555485e <asmb+14>:	je     0x555555554871 <.END>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554871 <.END>:	movq   $0x0,(%rdx,%rax,8)
  => 0x555555554879 <.END+8>:	adcq   $0x0,(%rdx,%rax,8)
  => 0x55555555487e <.EPILOG>:	leaveq 
  => 0x55555555487f <.EPILOG+1>:	retq   
end asmb
begin asmb
  => 0x555555554854 <asmb+4>:	mov    $0x0,%rax
  => 0x55555555485b <asmb+11>:	test   %rcx,%rcx
  => 0x55555555485e <asmb+14>:	je     0x555555554871 <.END>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554871 <.END>:	movq   $0x0,(%rdx,%rax,8)
  => 0x555555554879 <.END+8>:	adcq   $0x0,(%rdx,%rax,8)
  => 0x55555555487e <.EPILOG>:	leaveq 
  => 0x55555555487f <.EPILOG+1>:	retq   
end asmb
begin asmb
  => 0x555555554854 <asmb+4>:	mov    $0x0,%rax
  => 0x55555555485b <asmb+11>:	test   %rcx,%rcx
  => 0x55555555485e <asmb+14>:	je     0x555555554871 <.END>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554871 <.END>:	movq   $0x0,(%rdx,%rax,8)
  => 0x555555554879 <.END+8>:	adcq   $0x0,(%rdx,%rax,8)
  => 0x55555555487e <.EPILOG>:	leaveq 
  => 0x55555555487f <.EPILOG+1>:	retq   
end asmb
begin asmb
  => 0x555555554854 <asmb+4>:	mov    $0x0,%rax
  => 0x55555555485b <asmb+11>:	test   %rcx,%rcx
  => 0x55555555485e <asmb+14>:	je     0x555555554871 <.END>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554871 <.END>:	movq   $0x0,(%rdx,%rax,8)
  => 0x555555554879 <.END+8>:	adcq   $0x0,(%rdx,%rax,8)
  => 0x55555555487e <.EPILOG>:	leaveq 
  => 0x55555555487f <.EPILOG+1>:	retq   
end asmb
begin asmb
  => 0x555555554854 <asmb+4>:	mov    $0x0,%rax
  => 0x55555555485b <asmb+11>:	test   %rcx,%rcx
  => 0x55555555485e <asmb+14>:	je     0x555555554871 <.END>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554871 <.END>:	movq   $0x0,(%rdx,%rax,8)
  => 0x555555554879 <.END+8>:	adcq   $0x0,(%rdx,%rax,8)
  => 0x55555555487e <.EPILOG>:	leaveq 
  => 0x55555555487f <.EPILOG+1>:	retq   
end asmb
begin asmb
  => 0x555555554854 <asmb+4>:	mov    $0x0,%rax
  => 0x55555555485b <asmb+11>:	test   %rcx,%rcx
  => 0x55555555485e <asmb+14>:	je     0x555555554871 <.END>
  => 0x555555554871 <.END>:	movq   $0x0,(%rdx,%rax,8)
  => 0x555555554879 <.END+8>:	adcq   $0x0,(%rdx,%rax,8)
  => 0x55555555487e <.EPILOG>:	leaveq 
  => 0x55555555487f <.EPILOG+1>:	retq   
end asmb
begin asmb
  => 0x555555554854 <asmb+4>:	mov    $0x0,%rax
  => 0x55555555485b <asmb+11>:	test   %rcx,%rcx
  => 0x55555555485e <asmb+14>:	je     0x555555554871 <.END>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554871 <.END>:	movq   $0x0,(%rdx,%rax,8)
  => 0x555555554879 <.END+8>:	adcq   $0x0,(%rdx,%rax,8)
  => 0x55555555487e <.EPILOG>:	leaveq 
  => 0x55555555487f <.EPILOG+1>:	retq   
end asmb
begin asmb
  => 0x555555554854 <asmb+4>:	mov    $0x0,%rax
  => 0x55555555485b <asmb+11>:	test   %rcx,%rcx
  => 0x55555555485e <asmb+14>:	je     0x555555554871 <.END>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554860 <.FLOOP>:	mov    (%rdi,%rax,8),%r8
  => 0x555555554864 <.FLOOP+4>:	adc    (%rsi,%rax,8),%r8
  => 0x555555554868 <.FLOOP+8>:	mov    %r8,(%rdx,%rax,8)
  => 0x55555555486c <.FLOOP+12>:	inc    %rax
  => 0x55555555486f <.FLOOP+15>:	loop   0x555555554860 <.FLOOP>
  => 0x555555554871 <.END>:	movq   $0x0,(%rdx,%rax,8)
  => 0x555555554879 <.END+8>:	adcq   $0x0,(%rdx,%rax,8)
  => 0x55555555487e <.EPILOG>:	leaveq 
  => 0x55555555487f <.EPILOG+1>:	retq   
end asmb
